<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pincal</title>
  
  <subtitle>Pincal&#39;s website</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-18T10:46:04.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Pincal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Github Pages和Hexo搭建个人博客（二）- Anatole主题</title>
    <link href="http://yoursite.com/2019/05/18/hexo-2/"/>
    <id>http://yoursite.com/2019/05/18/hexo-2/</id>
    <published>2019-05-18T09:11:19.000Z</published>
    <updated>2019-05-18T10:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客介绍了如何使用<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> 和 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>搭建个人博客，博客搭起来以后我们可以根据自身需求对博客做一些个性化的设置，包括主题更换、加入访问量统计、鼠标点击效果等。</p><h2 id="一、语言设置"><a href="#一、语言设置" class="headerlink" title="一、语言设置"></a>一、语言设置</h2><p>打开站点主目录Blog文件夹中的_config.yml文件，配置如下信息：</p><pre><code>title: Pincalsubtitle: Pincal&apos;s websitedescription: 随便你写什么啦author: Pincallanguage: zh-cntimezone:</code></pre><p>这里可以根据自己情况填写，注意语言这一项有的是zh-cn，有的是zh-Hans，具体需要填写哪个要看你用的主题文件夹中language那个文件夹里的文件名是什么。</p><h2 id="二、主题更换"><a href="#二、主题更换" class="headerlink" title="二、主题更换"></a>二、主题更换</h2><p>这里可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网的主题</a>中挑选你喜欢的主题，我这里的主题用的是<a href="https://anatole.munen.cc/" target="_blank" rel="noopener">Anatole</a>，不过遗憾的是这个主题现在已经没有在维护了，如果是新手想要通过简单配置就满足大部分个性化设置推荐使用<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next</a>，这个主题用的人很多，配置很全也很方便。</p><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1. 下载主题"></a>1. 下载主题</h3><p>找到你的主题的Github页，使用以下命令把主题克隆到你的本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog/themes</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git(主题Github地址)</span><br></pre></td></tr></table></figure><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><p>打开站点主目录Blog文件夹中的_config.xml文件，theme项配置为你下载的主题名：</p><pre><code>theme: hexo-theme-Anatole</code></pre><h3 id="3-本地查看"><a href="#3-本地查看" class="headerlink" title="3. 本地查看"></a>3. 本地查看</h3><p>配置好以后执行以下3条命令，在本地查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>由于我用的是Anatole主题，查看时会报错，在blog目录下执行一下下面的命令就好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-render-pug</span><br></pre></td></tr></table></figure><h2 id="三、关于页面"><a href="#三、关于页面" class="headerlink" title="三、关于页面"></a>三、关于页面</h2><p>很多主题安装好以后点击关于页面，报错找不到该页面，这时候手动生成一下就好了，在blog目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><p>就可以在blog/source文件夹中看到生成了一个about文件夹，里面有一个about.md文件，在里面编辑自己的内容就好啦。友链页面也是同样的操作方法。</p><h2 id="四、配置RSS"><a href="#四、配置RSS" class="headerlink" title="四、配置RSS"></a>四、配置RSS</h2><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><p>在blog主目录下安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><h3 id="2-配置文件-1"><a href="#2-配置文件-1" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><h4 id="2-1-在blog主目录的配置文件下添加以下配置"><a href="#2-1-在blog主目录的配置文件下添加以下配置" class="headerlink" title="2.1 在blog主目录的配置文件下添加以下配置:"></a>2.1 在blog主目录的配置文件下添加以下配置:</h4><pre><code>theme: hexo-theme-Anatoleplugins:  hexo-generator-feedfeed:    type: atom    path: atom.xml    limit: 20</code></pre><h4 id="2-2在主题目录下的配置文件中添加以下配置："><a href="#2-2在主题目录下的配置文件中添加以下配置：" class="headerlink" title="2.2在主题目录下的配置文件中添加以下配置："></a>2.2在主题目录下的配置文件中添加以下配置：</h4><pre><code>rss: /atom.xml</code></pre><h2 id="五、添加鼠标点击爱心效果"><a href="#五、添加鼠标点击爱心效果" class="headerlink" title="五、添加鼠标点击爱心效果"></a>五、添加鼠标点击爱心效果</h2><p>将以下js代码添加到主题文件夹-&gt;layout-&gt;partial里的footer.pug中，添加的时候注意pug文件的语法格式：<br><code>!function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);</code></p><h2 id="六、添加评论留言功能"><a href="#六、添加评论留言功能" class="headerlink" title="六、添加评论留言功能"></a>六、添加评论留言功能</h2><p>这里用的是valine，注册一个<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>账号，并创建一个应用，在应用的设置-&gt;应用Key中找到你的App ID和App Key并填入到主题的配置文件中：</p><pre><code>valine:  enable: true  appid: 你的id  appkey: 你的key  notify: false   verify: false  avatar: monsterid  placeholder: &apos;comment&apos;</code></pre><p>这里的avatar是<a href="https://github.com/xCss/Valine/wiki/avatar-setting-for-valine" target="_blank" rel="noopener">评论头像类型设置</a>,可以根据自己喜欢设置，placeholder是评论输入框提示内容。</p><h2 id="六、添加访问量统计功能"><a href="#六、添加访问量统计功能" class="headerlink" title="六、添加访问量统计功能"></a>六、添加访问量统计功能</h2><p>因为我用的这个主题没有这个配置项，只能自己动手丰衣足食了，这里用的是<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>。将以下代码嵌入到合适的文件中：</p><pre><code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</code></pre><p>这里的js代码可以加载外部js文件，也可以直接把代码保存到本地执行，我这里是直接把上面网址中的js代码复制下来然后嵌入到主题文件夹-&gt;layout-&gt;partial-&gt;footer.pug中的，html标签也是放到footer.pug中，添加的时候注意pug文件的语法格式即可。</p><h2 id="七、Hexo常用命令"><a href="#七、Hexo常用命令" class="headerlink" title="七、Hexo常用命令"></a>七、Hexo常用命令</h2><p>最后总结一下Hexo的一些常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除缓存</span></span><br><span class="line">hexo g  <span class="comment">#生成文件</span></span><br><span class="line">hexo s  <span class="comment">#启动本地服务</span></span><br><span class="line">hexo d  <span class="comment">#发布到远程</span></span><br><span class="line">hexo new page <span class="string">"你的页面名称"</span> <span class="comment">#生成页面</span></span><br><span class="line">hexo new <span class="string">"你的文章名"</span> <span class="comment">#生成文章</span></span><br></pre></td></tr></table></figure><hr><p>到这里基本就可以满足的我的大部分配置需求了，还有一些其它的配置：头像更改、社交网站链接之类的比较简单我就不放在这里了，后续的话还打算买个域名基本就差不多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇博客介绍了如何使用&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt; 和 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
      <category term="other" scheme="http://yoursite.com/categories/hexo/other/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Github Pages和Hexo搭建个人博客（一）</title>
    <link href="http://yoursite.com/2019/05/18/hexo_1/"/>
    <id>http://yoursite.com/2019/05/18/hexo_1/</id>
    <published>2019-05-18T08:11:19.000Z</published>
    <updated>2019-05-18T09:13:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天利用零碎时间搭了个人博客，第一篇博客就介绍下使用<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> 和 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>搭建个人博客的过程，我这里的环境是Mac。</p><h2 id="一、本地工作"><a href="#一、本地工作" class="headerlink" title="一、本地工作"></a>一、本地工作</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><ul><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a></li><li>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></li></ul><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h3><p>创建一个文件夹命名为blog，进入该文件夹，执行初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h3 id="4-启动本地服务器"><a href="#4-启动本地服务器" class="headerlink" title="4. 启动本地服务器"></a>4. 启动本地服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>这时候在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到个人博客的首页了。</p><h2 id="二、Github配置"><a href="#二、Github配置" class="headerlink" title="二、Github配置"></a>二、Github配置</h2><p>以上第一步完成以后我们可以在本地看到自己的博客了，想要把这个博客发布出去让其他人也看到，我们就需要使用Github Pages。</p><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h3><p>在你的Github账户中新建一个仓库，Repository name为：pincal(你的Github用户名).github.io，这样以后你的博客就可以通过这个地址来访问了。</p><h3 id="2-本地配置Github账号和邮箱"><a href="#2-本地配置Github账号和邮箱" class="headerlink" title="2. 本地配置Github账号和邮箱"></a>2. 本地配置Github账号和邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"pincal"</span>// Github用户名</span><br><span class="line">$ git config --global user.email  <span class="string">"xxx@qq.com"</span>// Github邮箱</span><br></pre></td></tr></table></figure><h3 id="3-配置ssh-key"><a href="#3-配置ssh-key" class="headerlink" title="3. 配置ssh key"></a>3. 配置ssh key</h3><h4 id="3-1-生成ssh-key"><a href="#3-1-生成ssh-key" class="headerlink" title="3.1 生成ssh key"></a>3.1 生成ssh key</h4><p>在本地命令行中输入以下命令生成key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"Github邮件地址"</span></span><br></pre></td></tr></table></figure><p>这里的参数-C的意思是comment to identify the key，也就是用于识别这个密钥的注释，理论上你输入任何内容都是可以的，很多网站使用邮箱作为识别这个key的注释。<br>执行完这个命令以后会在你本地生成2个文件，其中一个文件保存公钥，另一个文件保存私钥。</p><h4 id="3-2-key配置到Github"><a href="#3-2-key配置到Github" class="headerlink" title="3.2 key配置到Github"></a>3.2 key配置到Github</h4><p>在你的Github的个人设置 -&gt; SSH and GPG keys -&gt; New SSH key中，填入你上面生成的id_rsa.pub文件中的内容。然后在本地输入以下命令测试是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>You’ve successfully authenticated, but GitHub does not provide shell access.看到这个信息就代表你配置成功了。</p><h3 id="4-发布到Github"><a href="#4-发布到Github" class="headerlink" title="4. 发布到Github"></a>4. 发布到Github</h3><h4 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1 配置文件"></a>4.1 配置文件</h4><p>打开blog文件夹中的_config.yml,在deploy的配置项中添加以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/你的Github用户名/你的Github用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="4-2-发布"><a href="#4-2-发布" class="headerlink" title="4.2 发布"></a>4.2 发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>过程中要输入Github用户名和密码，这时候在浏览器输入你前面配置好的Github仓库名就可以看到你的博客了。</p><hr><p>到这里我们就完成最初级的个人博客搭建了，下一篇介绍一下关于博客的个人化配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天利用零碎时间搭了个人博客，第一篇博客就介绍下使用&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt; 和 &lt;a href=&quot;https://hexo.io
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
      <category term="other" scheme="http://yoursite.com/categories/hexo/other/"/>
    
    
  </entry>
  
</feed>
